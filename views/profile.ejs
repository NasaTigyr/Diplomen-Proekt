<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Profile - Martial Arts Competitions</title>
    <link rel="stylesheet" href="/styleIndex.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <!-- Include the navigation header -->
    <%- include('header', {currentPage: 'profile', user: user}); %>
    
    <div class="container my-5">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3">
                <div class="card mb-4">
                    <div class="card-body text-center">
                        <% if(user.profile_picture) { %>
                            <img src="<%= user.profile_picture %>" alt="Profile Picture" class="rounded-circle mb-3" style="width: 100px; height: 100px; object-fit: cover;">
                        <% } else { %>
                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3" style="width: 100px; height: 100px;">
                                <span class="text-white fs-1"><%= user.first_name.charAt(0) %><%= user.last_name.charAt(0) %></span>
                            </div>
                        <% } %>
                        <h5 class="card-title"><%= user.first_name %> <%= user.last_name %></h5>
                        <p class="card-text text-muted"><%= user.email %></p>
                        <span class="badge rounded-pill 
                            <% if(user.user_type === 'coach') { %>
                                bg-primary
                            <% } else if(user.user_type === 'athlete') { %>
                                bg-success
                            <% } else { %>
                                bg-secondary
                            <% } %>">
                            <%= user.user_type.charAt(0).toUpperCase() + user.user_type.slice(1) %>
                        </span>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item active" id="profile-tab">Profile Information</li>
                        <% if(user.user_type === 'coach') { %>
                            <li class="list-group-item" id="my-club-tab">My Club</li>
                            <li class="list-group-item" id="my-events-tab">My Events</li>
                            <li class="list-group-item" id="my-athletes-tab">My Athletes</li>
                        <% } else if(user.user_type === 'athlete') { %>
                            <li class="list-group-item" id="my-club-tab">My Club</li>
                            <li class="list-group-item" id="my-competitions-tab">My Competitions</li>
                        <% } else { %>
                            <li class="list-group-item" id="join-club-tab">Join a Club</li>
                            <li class="list-group-item" id="create-club-tab">Create a Club</li>
                        <% } %>
                        <li class="list-group-item" id="change-password-tab">Change Password</li>
                    </ul>
                </div>
            </div>
            
            <!-- Main Content Area -->
            <div class="col-md-9">
                <!-- Alert message container (hidden by default) -->
                <div id="alert-container" class="alert d-none mb-4" role="alert"></div>
                
                <!-- Profile Information Section -->
                <div id="profile-section" class="content-section">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">Profile Information</h4>
                            <button id="edit-profile-btn" class="btn btn-sm btn-outline-primary">Edit</button>
                        </div>
                        <div class="card-body">
                            <form id="profile-form">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="first_name" class="form-label">First Name</label>
                                        <input type="text" class="form-control" id="first_name" value="<%= user.first_name %>" disabled>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="last_name" class="form-label">Last Name</label>
                                        <input type="text" class="form-control" id="last_name" value="<%= user.last_name %>" disabled>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="email" value="<%= user.email %>" disabled>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="date_of_birth" class="form-label">Date of Birth</label>

<input type="date" class="form-control" id="date_of_birth" value="<%= user.date_of_birth ? (typeof user.date_of_birth === 'string' ? user.date_of_birth.split('T')[0] : new Date(user.date_of_birth).toISOString().split('T')[0]) : '' %>" disabled>

                                        <small class="form-text text-muted">Used for age category assignments</small>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="gender" class="form-label">Gender</label>
                                        <select class="form-select" id="gender" disabled>
                                            <option value="male" <%= user.gender === 'male' ? 'selected' : '' %>>Male</option>
                                            <option value="female" <%= user.gender === 'female' ? 'selected' : '' %>>Female</option>
                                            <option value="other" <%= user.gender === 'other' ? 'selected' : '' %>>Other</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="contact_number" class="form-label">Contact Number</label>
                                    <input type="tel" class="form-control" id="contact_number" value="<%= user.contact_number || '' %>" disabled>
                                </div>
                                <div class="mb-3">
                                    <label for="profile_picture" class="form-label">Profile Picture</label>
                                    <input type="file" class="form-control" id="profile_picture" disabled>
                                    <% if (user.profile_picture) { %>
                                        <div class="mt-2">
                                            <img src="<%= user.profile_picture %>" alt="Current profile picture" class="img-thumbnail" style="max-height: 100px;">
<p>Debug - Image path: <%= user.profile_picture %></p>
                                        </div>
                                    <% } %>
                                </div>
                                <div class="d-grid d-md-flex justify-content-md-end">
                                    <button type="submit" id="save-profile-btn" class="btn btn-primary" disabled>Save Changes</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- My Club Section for Coaches -->
                <div id="my-club-section" class="content-section d-none">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">My Club</h4>
                            <% if(user.user_type === 'coach') { %>
                                <button id="edit-club-btn" class="btn btn-sm btn-outline-primary">Edit Club</button>
                            <% } %>
                        </div>
                        <div class="card-body">
                            <div id="club-details-container">
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                            <div id="no-club-message" class="alert alert-info text-center mt-4 d-none">
                                <% if(user.user_type === 'coach') { %>
                                    You haven't created a club yet.
                                    <div class="mt-3">
                                        <a href="/createClub" class="btn btn-primary">Create a Club</a>
                                    </div>
                                <% } else { %>
                                    You are not a member of any club yet.
                                    <div class="mt-3">
                                        <a href="/joinClub" class="btn btn-primary">Join a Club</a>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- My Athletes Section for Coaches -->
                <div id="my-athletes-section" class="content-section d-none">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">My Athletes</h4>
                            <a href="/inviteAthlete" class="btn btn-sm btn-primary">Invite Athlete</a>
                        </div>
                        <div class="card-body">
                            <div id="athletes-container">
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                            <div id="no-athletes-message" class="alert alert-info text-center mt-4 d-none">
                                You don't have any athletes in your club yet.
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- My Events Section for Coaches -->
                <div id="my-events-section" class="content-section d-none">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">My Events</h4>
                            <a href="/createEvent" class="btn btn-sm btn-primary">Create Event</a>
                        </div>
                        <div class="card-body">
                            <div id="my-events-container">
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                            <div id="no-events-message" class="alert alert-info text-center mt-4 d-none">
                                You haven't created any events yet.
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- My Competitions Section for Athletes -->
                <div id="my-competitions-section" class="content-section d-none">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="mb-0">My Competitions</h4>
                        </div>
                        <div class="card-body">
                            <div id="my-competitions-container">
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                            <div id="no-competitions-message" class="alert alert-info text-center mt-4 d-none">
                                You haven't registered for any competitions yet.
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Join Club Section for Regular Users -->
                <div id="join-club-section" class="content-section d-none">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="mb-0">Join a Club</h4>
                        </div>
                        <div class="card-body">
                            <p class="mb-4">Find a club to join and become an athlete member.</p>
                            
                            <div class="mb-3">
                                <input type="text" id="club-search" class="form-control" placeholder="Search clubs by name or location...">
                            </div>
                            
                            <div id="clubs-list-container">
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                            <div id="no-clubs-message" class="alert alert-info text-center mt-4 d-none">
                                No clubs found. Try a different search term.
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Create Club Section for Regular Users -->
                <div id="create-club-section" class="content-section d-none">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="mb-0">Create a Club</h4>
                        </div>
                        <div class="card-body">
                            <p class="mb-4">Create your own martial arts club and become a coach.</p>
                            
                            <form id="create-club-form">
                                <div class="mb-3">
                                    <label for="club-name" class="form-label">Club Name</label>
                                    <input type="text" class="form-control" id="club-name" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="club-description" class="form-label">Description</label>
                                    <textarea class="form-control" id="club-description" rows="3"></textarea>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="club-address" class="form-label">Address</label>
                                    <textarea class="form-control" id="club-address" rows="2" required></textarea>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="club-logo" class="form-label">Club Logo</label>
                                    <input type="file" class="form-control" id="club-logo">
                                </div>
                                
                                <div class="alert alert-info">
                                    <p class="mb-0"><strong>Note:</strong> Creating a club will update your account type to "Coach".</p>
                                </div>
                                
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-primary">Create Club</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- Change Password Section -->
                <div id="change-password-section" class="content-section d-none">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="mb-0">Change Password</h4>
                        </div>
                        <div class="card-body">
                            <form id="password-form">
                                <div class="mb-3">
                                    <label for="current_password" class="form-label">Current Password</label>
                                    <input type="password" class="form-control" id="current_password" required>
                                </div>
                                <div class="mb-3">
                                    <label for="new_password" class="form-label">New Password</label>
                                    <input type="password" class="form-control" id="new_password" required>
                                    <div class="form-text">Password must be at least 8 characters long.</div>
                                </div>
                                <div class="mb-3">
                                    <label for="confirm_password" class="form-label">Confirm New Password</label>
                                    <input type="password" class="form-control" id="confirm_password" required>
                                </div>
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-primary">Change Password</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Footer -->
    <footer class="bg-light text-center py-3 mt-5">
        <p>&copy; 2025 Martial Arts Competitions. All Rights Reserved.</p>
    </footer>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab navigation
            document.getElementById('profile-tab').addEventListener('click', showProfileSection);
            
            // Set up role-specific tab events
            <% if(user.user_type === 'coach') { %>
                document.getElementById('my-club-tab').addEventListener('click', showMyClubSection);
                document.getElementById('my-events-tab').addEventListener('click', showMyEventsSection);
                document.getElementById('my-athletes-tab').addEventListener('click', showMyAthletesSection);
            <% } else if(user.user_type === 'athlete') { %>
                document.getElementById('my-club-tab').addEventListener('click', showMyClubSection);
                document.getElementById('my-competitions-tab').addEventListener('click', showMyCompetitionsSection);
            <% } else { %>
                document.getElementById('join-club-tab').addEventListener('click', showJoinClubSection);
                document.getElementById('create-club-tab').addEventListener('click', showCreateClubSection);
            <% } %>
            
            document.getElementById('change-password-tab').addEventListener('click', showChangePasswordSection);
            
            // Edit profile
            document.getElementById('edit-profile-btn').addEventListener('click', toggleProfileEdit);
            document.getElementById('profile-form').addEventListener('submit', updateProfile);
            
            // Password form
            document.getElementById('password-form').addEventListener('submit', changePassword);
            
            // Create club form
            <% if(user.user_type === 'regular') { %>
                document.getElementById('create-club-form').addEventListener('submit', createClub);
                document.getElementById('club-search').addEventListener('input', debounce(searchClubs, 500));
            <% } %>
            
            // Load data based on user role
            <% if(user.user_type === 'coach') { %>
                loadCoachClub();
                loadClubAthletes();
                loadCoachEvents();
            <% } else if(user.user_type === 'athlete') { %>
                loadAthleteClub();
                loadAthleteCompetitions();
            <% } else { %>
                loadAvailableClubs();
            <% } %>
            
            // Check URL for success or error messages
            checkUrlParams();
        });
        
        function showProfileSection() {
            setActiveTab('profile-tab');
            showSection('profile-section');
        }
        
        function showMyClubSection() {
            setActiveTab('my-club-tab');
            showSection('my-club-section');
            <% if(user.user_type === 'coach') { %>
                loadCoachClub();
            <% } else if(user.user_type === 'athlete') { %>
                loadAthleteClub();
            <% } %>
        }
        
        function showMyEventsSection() {
            setActiveTab('my-events-tab');
            showSection('my-events-section');
            loadCoachEvents();
        }
        
        function showMyAthletesSection() {
            setActiveTab('my-athletes-tab');
            showSection('my-athletes-section');
            loadClubAthletes();
        }
        
        function showMyCompetitionsSection() {
            setActiveTab('my-competitions-tab');
            showSection('my-competitions-section');
            loadAthleteCompetitions();
        }
        
        function showJoinClubSection() {
            setActiveTab('join-club-tab');
            showSection('join-club-section');
            loadAvailableClubs();
        }
        
        function showCreateClubSection() {
            setActiveTab('create-club-tab');
            showSection('create-club-section');
        }
        
        function showChangePasswordSection() {
            setActiveTab('change-password-tab');
            showSection('change-password-section');
        }
        
        function setActiveTab(tabId) {
            document.querySelectorAll('.list-group-item').forEach(item => {
                item.classList.remove('active');
            });
            document.getElementById(tabId).classList.add('active');
        }
        
        function showSection(sectionId) {
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.add('d-none');
            });
            document.getElementById(sectionId).classList.remove('d-none');
        }
        
        function toggleProfileEdit() {
            const editButton = document.getElementById('edit-profile-btn');
            const saveButton = document.getElementById('save-profile-btn');
            const inputs = document.querySelectorAll('#profile-form input, #profile-form select');
            
            const isEditing = editButton.textContent === 'Cancel';
            
            if (isEditing) {
                // Cancel editing
                editButton.textContent = 'Edit';
                editButton.classList.remove('btn-outline-danger');
                editButton.classList.add('btn-outline-primary');
                saveButton.disabled = true;
                
                // Reset form values
                document.getElementById('first_name').value = '<%= user.first_name %>';
                document.getElementById('last_name').value = '<%= user.last_name %>';
                document.getElementById('date_of_birth').value = '<%= user.date_of_birth || "" %>';
                document.getElementById('email').value = '<%= user.email %>';
                document.getElementById('gender').value = '<%= user.gender %>';
                document.getElementById('contact_number').value = '<%= user.contact_number || "" %>';
                
                // Disable inputs
                inputs.forEach(input => {
                    input.disabled = true;
                });
            } else {
                // Start editing
                editButton.textContent = 'Cancel';
                editButton.classList.remove('btn-outline-primary');
                editButton.classList.add('btn-outline-danger');
                saveButton.disabled = false;
                
                // Enable inputs (keep certain fields disabled)
                inputs.forEach(input => {
                    if (input.id !== 'date_of_birth' && input.id !== 'gender') {
                        input.disabled = false;
                    }
                });
            }
        }
        
        function updateProfile(e) {
            e.preventDefault();
            
            const data = {
                first_name: document.getElementById('first_name').value,
                last_name: document.getElementById('last_name').value,
                email: document.getElementById('email').value,
                contact_number: document.getElementById('contact_number').value
            };
            
            const profilePicture = document.getElementById('profile_picture').files[0];
            
            // Create FormData for file upload
            const formData = new FormData();
            formData.append('first_name', data.first_name);
            formData.append('last_name', data.last_name);
            formData.append('email', data.email);
            formData.append('contact_number', data.contact_number);
            
            if (profilePicture) {
                formData.append('profile_picture', profilePicture);
            }
            
            fetch('/api/user/profile', {
                method: 'PUT',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Failed to update profile');
                    });
                }
                return response.json();
            })
            .then(data => {
                showAlert('Profile updated successfully!', 'success');
                toggleProfileEdit(); // Reset form to view mode
                
                // Update the displayed name in the sidebar
                const nameElement = document.querySelector('.card-title');
                if (nameElement) {
                    nameElement.textContent = `${data.user.first_name} ${data.user.last_name}`;
                }
                
                // Reload page after a short delay to refresh all user data
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            })
            .catch(error => {
                showAlert(error.message, 'danger');
            });
        }
        
        function changePassword(e) {
            e.preventDefault();
            
            const currentPassword = document.getElementById('current_password').value;
            const newPassword = document.getElementById('new_password').value;
            const confirmPassword = document.getElementById('confirm_password').value;
            
            // Validate passwords
            if (newPassword !== confirmPassword) {
                showAlert('New passwords do not match', 'danger');
                return;
            }
            
            if (newPassword.length < 8) {
                showAlert('Password must be at least 8 characters long', 'danger');
                return;
            }
            
            const data = {
                current_password: currentPassword,
                new_password: newPassword,
                confirm_password: confirmPassword
            };
            
            fetch('/api/user/password', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Failed to change password');
                    });
                }
                return response.json();
            })
            .then(data => {
                showAlert('Password changed successfully!', 'success');
                document.getElementById('password-form').reset();
            })
            .catch(error => {
                showAlert(error.message, 'danger');
            });
        }
        
        <% if(user.user_type === 'coach') { %>
        // Coach-specific functions
        function loadCoachClub() {
            fetch('/api/coaches/<%= user.id %>/clubs')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load club');
                    }
                    return response.json();
                })
                .then(clubs => {
                    const container = document.getElementById('club-details-container');
                    const noClubMessage = document.getElementById('no-club-message');
                    
                    container.innerHTML = '';
                    
                    if (clubs.length === 0) {
                        noClubMessage.classList.remove('d-none');
                        return;
                    }
                    
                    noClubMessage.classList.add('d-none');
                    
                    // Display the first club (coaches typically have one club)
                    const club = clubs[0];
                    
                    container.innerHTML = `
                        <div class="text-center mb-4">
                            ${club.logo ? 
                                `<img src="${club.logo}" alt="${club.name}" class="img-fluid mb-3" style="max-height: 150px;">` : 
                                `<div class="bg-light p-5 mb-3 rounded">
                                    <i class="fas fa-dojo fa-3x text-secondary"></i>
                                    <p class="text-muted">No logo</p>
                                </div>`
                            }
                            <h3>${club.name}</h3>
                        </div>
                        
                        <div class="mb-4">
                            <h5>Description</h5>
                            <p>${club.description || 'No description provided.'}</p>
                        </div>
                        
                        <div class="mb-4">
                            <h5>Address</h5>
                            <p>${club.address}</p>
                        </div>
                        
                        <div class="mb-4">
                            <h5>Club Statistics</h5>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <h1 id="athletes-count">...</h1>
                                            <p class="mb-0">Athletes</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <h1 id="events-count">...</h1>
                                            <p class="mb-0">Events</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <h1 id="competitions-count">...</h1>
                                            <p class="mb-0">Competitions</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="/club/${club.id}/edit" class="btn btn-primary">Edit Club</a>
                        </div>
                    `;
                    
                    // Load club statistics
                    loadClubStatistics(club.id);
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to load club data', 'danger');
                });
        }
        
        function loadClubAthletes() {
            fetch('/api/coaches/<%= user.id %>/athletes')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load athletes');
                    }
                    return response.json();
                })
                .then(athletes => {
                    const container = document.getElementById('athletes-container');
                    const noAthletesMessage = document.getElementById('no-athletes-message');
                    
                    container.innerHTML = '';
                    
                    if (athletes.length === 0) {
                        noAthletesMessage.classList.remove('d-none');
                        return;
                    }

                    noAthletesMessage.classList.add('d-none');
                    
                    // Create an HTML table for athletes
                    let tableHTML = `
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Age Group</th>
                                    <th>Gender</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                    `;
                    
                    athletes.forEach(athlete => {
                        const ageGroup = calculateAgeGroup(athlete.date_of_birth);
                        
                        let statusBadge = '';
                        switch(athlete.status) {
                            case 'active':
                                statusBadge = '<span class="badge bg-success">Active</span>';
                                break;
                            case 'pending':
                                statusBadge = '<span class="badge bg-warning">Pending</span>';
                                break;
                            case 'inactive':
                                statusBadge = '<span class="badge bg-secondary">Inactive</span>';
                                break;
                        }
                        
                        tableHTML += `
                            <tr>
                                <td>${athlete.first_name} ${athlete.last_name}</td>
                                <td>${ageGroup}</td>
                                <td>${capitalizeFirstLetter(athlete.gender)}</td>
                                <td>${statusBadge}</td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="/athlete/${athlete.id}" class="btn btn-outline-primary">View</a>
                                        <button class="btn btn-outline-danger" onclick="removeAthlete(${athlete.id})">Remove</button>
                                    </div>
                                </td>
                            </tr>
                        `;
                    });
                    
                    tableHTML += `
                            </tbody>
                        </table>
                    `;
                    
                    container.innerHTML = tableHTML;
                    
                    // Update athlete count in club statistics if available
                    const athletesCountElement = document.getElementById('athletes-count');
                    if (athletesCountElement) {
                        athletesCountElement.textContent = athletes.length;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to load athletes', 'danger');
                });
        }
        
        function loadCoachEvents() {
            fetch('/api/coaches/<%= user.id %>/events')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load events');
                    }
                    return response.json();
                })
                .then(events => {
                    const container = document.getElementById('my-events-container');
                    const noEventsMessage = document.getElementById('no-events-message');
                    
                    container.innerHTML = '';
                    
                    if (events.length === 0) {
                        noEventsMessage.classList.remove('d-none');
                        return;
                    }
                    
                    noEventsMessage.classList.add('d-none');
                    
                    events.forEach(event => {
                        const startDate = new Date(event.start_date).toLocaleDateString();
                        const endDate = new Date(event.end_date).toLocaleDateString();
                        
                        const card = document.createElement('div');
                        card.className = 'card mb-3';
                        card.innerHTML = `
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="${event.banner_image || '/images/default-event.jpg'}" class="img-fluid rounded-start" alt="${event.name}" style="height: 100%; object-fit: cover;">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">${event.name}</h5>
                                        <p class="card-text">${event.description ? event.description.substring(0, 100) + '...' : 'No description'}</p>
                                        <p class="card-text"><small class="text-muted">Dates: ${startDate} - ${endDate}</small></p>
                                        <p class="card-text">
                                            <span class="badge ${event.event_type === 'team' ? 'bg-primary' : 'bg-success'}">
                                                ${event.event_type === 'team' ? 'Team Event' : 'Free for All'}
                                            </span>
                                        </p>
                                        <div class="btn-group">
                                            <a href="/event/${event.id}" class="btn btn-sm btn-primary">View</a>
                                            <a href="/event/${event.id}/edit" class="btn btn-sm btn-outline-primary">Edit</a>
                                            <a href="/event/${event.id}/categories" class="btn btn-sm btn-outline-primary">Categories</a>
                                            <a href="/event/${event.id}/registrations" class="btn btn-sm btn-outline-primary">Registrations</a>
                                            <button class="btn btn-sm btn-outline-danger" onclick="deleteEvent(${event.id})">Delete</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        container.appendChild(card);
                    });
                    
                    // Update events count in club statistics if available
                    const eventsCountElement = document.getElementById('events-count');
                    if (eventsCountElement) {
                        eventsCountElement.textContent = events.length;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to load events', 'danger');
                });
        }
        
        function loadClubStatistics(clubId) {
            fetch(`/api/clubs/${clubId}/statistics`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load club statistics');
                    }
                    return response.json();
                })
                .then(stats => {
                    document.getElementById('athletes-count').textContent = stats.athletesCount;
                    document.getElementById('events-count').textContent = stats.eventsCount;
                    document.getElementById('competitions-count').textContent = stats.competitionsCount;
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Don't show alert for this, just log the error
                });
        }
        <% } %>
        
        <% if(user.user_type === 'athlete') { %>
        // Athlete-specific functions
        function loadAthleteClub() {
            fetch('/api/athletes/<%= user.id %>/club')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load club');
                    }
                    return response.json();
                })
                .then(club => {
                    const container = document.getElementById('club-details-container');
                    const noClubMessage = document.getElementById('no-club-message');
                    
                    container.innerHTML = '';
                    
                    if (!club) {
                        noClubMessage.classList.remove('d-none');
                        return;
                    }
                    
                    noClubMessage.classList.add('d-none');
                    
                    container.innerHTML = `
                        <div class="text-center mb-4">
                            ${club.logo ? 
                                `<img src="${club.logo}" alt="${club.name}" class="img-fluid mb-3" style="max-height: 150px;">` : 
                                `<div class="bg-light p-5 mb-3 rounded">
                                    <i class="fas fa-dojo fa-3x text-secondary"></i>
                                    <p class="text-muted">No logo</p>
                                </div>`
                            }
                            <h3>${club.name}</h3>
                        </div>
                        
                        <div class="mb-4">
                            <h5>Description</h5>
                            <p>${club.description || 'No description provided.'}</p>
                        </div>
                        
                        <div class="mb-4">
                            <h5>Address</h5>
                            <p>${club.address}</p>
                        </div>
                        
                        <div class="mb-4">
                            <h5>Coach</h5>
                            <p>${club.coach_name || 'Information not available'}</p>
                        </div>
                        
                        <div class="mb-4">
                            <h5>Membership Status</h5>
                            <p>
                                <span class="badge ${club.status === 'active' ? 'bg-success' : 
                                                      club.status === 'pending' ? 'bg-warning' : 'bg-secondary'}">
                                    ${capitalizeFirstLetter(club.status)}
                                </span>
                            </p>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-danger" onclick="leaveClub(${club.id})">Leave Club</button>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to load club data', 'danger');
                });
        }
        
        function loadAthleteCompetitions() {
            fetch('/api/athletes/<%= user.id %>/competitions')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load competitions');
                    }
                    return response.json();
                })
                .then(registrations => {
                    const container = document.getElementById('my-competitions-container');
                    const noCompetitionsMessage = document.getElementById('no-competitions-message');
                    
                    container.innerHTML = '';
                    
                    if (registrations.length === 0) {
                        noCompetitionsMessage.classList.remove('d-none');
                        return;
                    }
                    
                    noCompetitionsMessage.classList.add('d-none');
                    
                    // Group registrations by event
                    const eventGroups = {};
                    
                    registrations.forEach(reg => {
                        if (!eventGroups[reg.event_id]) {
                            eventGroups[reg.event_id] = {
                                eventId: reg.event_id,
                                eventName: reg.event_name,
                                startDate: reg.start_date,
                                endDate: reg.end_date,
                                registrations: []
                            };
                        }
                        
                        eventGroups[reg.event_id].registrations.push(reg);
                    });
                    
                    // Create cards for each event
                    Object.values(eventGroups).forEach(group => {
                        const card = document.createElement('div');
                        card.className = 'card mb-3';
                        
                        const startDate = new Date(group.startDate).toLocaleDateString();
                        const endDate = new Date(group.endDate).toLocaleDateString();
                        
                        let regsList = '';
                        group.registrations.forEach(reg => {
                            let statusBadge = '';
                            switch(reg.status) {
                                case 'pending':
                                    statusBadge = '<span class="badge bg-warning">Pending</span>';
                                    break;
                                case 'approved':
                                    statusBadge = '<span class="badge bg-success">Approved</span>';
                                    break;
                                case 'rejected':
                                    statusBadge = '<span class="badge bg-danger">Rejected</span>';
                                    break;
                            }
                            
                            regsList += `
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    ${reg.category_name}
                                    <div>
                                        ${statusBadge}
                                        ${reg.status !== 'rejected' ? 
                                            `<button class="btn btn-sm btn-outline-danger ms-2" onclick="cancelRegistration(${reg.id})">Cancel</button>` : 
                                            ''}
                                    </div>
                                </li>
                            `;
                        });
                        
                        card.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${group.eventName}</h5>
                                    <small class="text-muted">${startDate} - ${endDate}</small>
                                </div>
                            </div>
                            <ul class="list-group list-group-flush">
                                ${regsList}
                            </ul>
                            <div class="card-footer">
                                <a href="/event/${group.eventId}" class="btn btn-sm btn-primary">View Event</a>
                            </div>
                        `;
                        
                        container.appendChild(card);
                    });
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to load competitions', 'danger');
                });
        }
        
        function leaveClub(clubId) {
            if (confirm('Are you sure you want to leave this club? This action cannot be undone.')) {
                fetch(`/api/athletes/<%= user.id %>/club/${clubId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to leave club');
                    }
                    return response.json();
                })
                .then(data => {
                    showAlert('You have successfully left the club', 'success');
                    // Reload the page after a short delay to update user_type
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to leave club: ' + error.message, 'danger');
                });
            }
        }
        <% } %>
        
        <% if(user.user_type === 'regular') { %>
        // Regular user functions
        function loadAvailableClubs() {
            const searchTerm = document.getElementById('club-search').value;
            
            fetch(`/api/clubs?search=${encodeURIComponent(searchTerm)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load clubs');
                    }
                    return response.json();
                })
                .then(clubs => {
                    const container = document.getElementById('clubs-list-container');
                    const noClubsMessage = document.getElementById('no-clubs-message');
                    
                    container.innerHTML = '';
                    
                    if (clubs.length === 0) {
                        noClubsMessage.classList.remove('d-none');
                        return;
                    }
                    
                    noClubsMessage.classList.add('d-none');
                    
                    clubs.forEach(club => {
                        const card = document.createElement('div');
                        card.className = 'card mb-3';
                        card.innerHTML = `
                            <div class="row g-0">
                                <div class="col-md-3 d-flex align-items-center justify-content-center p-3">
                                    ${club.logo ? 
                                        `<img src="${club.logo}" alt="${club.name}" class="img-fluid rounded" style="max-height: 100px;">` : 
                                        `<div class="bg-light p-4 rounded text-center">
                                            <i class="fas fa-dojo fa-2x text-secondary"></i>
                                        </div>`
                                    }
                                </div>
                                <div class="col-md-9">
                                    <div class="card-body">
                                        <h5 class="card-title">${club.name}</h5>
                                        <p class="card-text text-muted small">${club.address}</p>
                                        <p class="card-text">${club.description ? club.description.substring(0, 100) + (club.description.length > 100 ? '...' : '') : 'No description'}</p>
                                        <button class="btn btn-primary" onclick="joinClub(${club.id})">Request to Join</button>
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        container.appendChild(card);
                    });
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to load clubs', 'danger');
                });
        }
        
        function searchClubs() {
            loadAvailableClubs();
        }
        
        function joinClub(clubId) {
            fetch('/api/clubs/join', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ club_id: clubId })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Failed to join club');
                    });
                }
                return response.json();
            })
            .then(data => {
                showAlert('Join request sent successfully! The club coach will review your request.', 'success');
                // Reload the page after a short delay to update user_type
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert(error.message, 'danger');
            });
        }
        
        function createClub(e) {
            e.preventDefault();
            
            const clubName = document.getElementById('club-name').value;
            const clubDescription = document.getElementById('club-description').value;
            const clubAddress = document.getElementById('club-address').value;
            const clubLogo = document.getElementById('club-logo').files[0];
            
            // Create FormData for file upload
            const formData = new FormData();
            formData.append('name', clubName);
            formData.append('description', clubDescription);
            formData.append('address', clubAddress);
            
            if (clubLogo) {
                formData.append('logo', clubLogo);
            }
            
            fetch('/api/clubs', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Failed to create club');
                    });
                }
                return response.json();
            })
            .then(data => {
                showAlert('Club created successfully! You are now a coach.', 'success');
                // Reload the page after a short delay to update user_type
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert(error.message, 'danger');
            });
        }
        <% } %>
        
        // Helper functions for all user types
        function deleteEvent(eventId) {
            if (confirm('Are you sure you want to delete this event? This action cannot be undone.')) {
                fetch(`/api/events/${eventId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete event');
                    }
                    return response.json();
                })
                .then(data => {
                    showAlert('Event deleted successfully', 'success');
                    loadCoachEvents();
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to delete event: ' + error.message, 'danger');
                });
            }
        }
        
        function cancelRegistration(regId) {
            if (confirm('Are you sure you want to cancel this registration?')) {
                fetch(`/api/registrations/${regId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to cancel registration');
                    }
                    return response.json();
                })
                .then(data => {
                    showAlert('Registration cancelled successfully', 'success');
                    <% if(user.user_type === 'athlete') { %>
                    loadAthleteCompetitions();
                    <% } %>
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to cancel registration: ' + error.message, 'danger');
                });
            }
        }
        
        function removeAthlete(athleteId) {
            if (confirm('Are you sure you want to remove this athlete from your club?')) {
                fetch(`/api/coaches/<%= user.id %>/athletes/${athleteId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to remove athlete');
                    }
                    return response.json();
                })
                .then(data => {
                    showAlert('Athlete removed successfully', 'success');
                    loadClubAthletes();
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Failed to remove athlete: ' + error.message, 'danger');
                });
            }
        }
        
        function calculateAgeGroup(dateOfBirth) {
            if (!dateOfBirth) return 'Unknown';
            
            const birthDate = new Date(dateOfBirth);
            const today = new Date();
            let age = today.getFullYear() - birthDate.getFullYear();
            
            // Adjust age if birthday hasn't occurred yet this year
            const monthDiff = today.getMonth() - birthDate.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            
            // Return age group based on age
            if (age < 8) return 'Under 8';
            if (age < 12) return 'Under 12';
            if (age < 14) return 'Under 14';
            if (age < 16) return 'Under 16 (Cadet)';
            if (age < 18) return 'Under 18 (Junior)';
            if (age < 21) return 'Under 21';
            return 'Senior';
        }
        
        function capitalizeFirstLetter(string) {
            if (!string) return '';
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alert-container');
            alertContainer.textContent = message;
            alertContainer.className = `alert alert-${type} mb-4`;
            
            // Scroll to the top to make sure alert is visible
            window.scrollTo(0, 0);
            
            // Auto-hide success messages after 5 seconds
            if (type === 'success') {
                setTimeout(() => {
                    alertContainer.classList.add('d-none');
                }, 5000);
            }
        }
        
        function checkUrlParams() {
            const urlParams = new URLSearchParams(window.location.search);
            const success = urlParams.get('success');
            const error = urlParams.get('error');
            
            if (success) {
                showAlert(decodeURIComponent(success), 'success');
            }
            
            if (error) {
                showAlert(decodeURIComponent(error), 'danger');
            }
        }
        
        // Helper function to debounce search input
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    </script>
