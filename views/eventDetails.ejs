<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Details - Martial Arts Competitions</title>
    <link rel="stylesheet" href="/styleIndex.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <!-- Include the navigation header -->
    <%- include('header', {currentPage: '', user: user}); %>
    
    <div class="container my-5">
        <div id="event-details">
            <!-- This will be populated with JavaScript -->
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
        
        <!-- Tabs for event details -->
        <ul class="nav nav-tabs mt-4" id="eventTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="categories-tab" data-bs-toggle="tab" data-bs-target="#categories" type="button" role="tab" aria-controls="categories" aria-selected="true">Categories</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="timetable-tab" data-bs-toggle="tab" data-bs-target="#timetable" type="button" role="tab" aria-controls="timetable" aria-selected="false">Timetable</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="location-tab" data-bs-toggle="tab" data-bs-target="#location" type="button" role="tab" aria-controls="location" aria-selected="false">Location</button>
            </li>
        </ul>
        
        <div class="tab-content p-3 border border-top-0 rounded-bottom" id="eventTabsContent">
            <!-- Categories Tab -->
            <div class="tab-pane fade show active" id="categories" role="tabpanel" aria-labelledby="categories-tab">
                <div id="categories-container">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                
                <div id="no-categories-message" class="alert alert-info text-center mt-4 d-none">
                    No categories found for this event.
                </div>
            </div>
            
            <!-- Timetable Tab -->
            <div class="tab-pane fade" id="timetable" role="tabpanel" aria-labelledby="timetable-tab">
                <div id="timetable-container">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                
                <div id="no-timetable-message" class="alert alert-info text-center mt-4 d-none">
                    No timetable entries found for this event.
                </div>
            </div>
            
            <!-- Location Tab -->
            <div class="tab-pane fade" id="location" role="tabpanel" aria-labelledby="location-tab">
                <div id="location-info">
                </div>
            </div>
        </div>
        
        <!-- Registration Section -->
        <div class="card mt-4" id="registration-section">
            <div class="card-header">
                <h4>Registration</h4>
            </div>
            <div class="card-body" id="registration-body">
                <!-- This will be populated with JavaScript -->
            </div>
        </div>
    </div>
    
    <!-- Footer -->
    <footer class="bg-light text-center py-3 mt-5">
        <p>&copy; 2025 Martial Arts Competitions. All Rights Reserved.</p>
    </footer>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        const eventId = <%= eventId %>;
        let eventData = null;
        let categories = [];
        let timetableEntries = [];
        let userRegistrations = [];
        
        document.addEventListener('DOMContentLoaded', function() {
            // Fetch event details
            fetchEventDetails();
            
            // Fetch categories
            fetchCategories();
            
            // Fetch timetable
            fetchTimetable();
            
            // If user is logged in, fetch their registrations
            <% if (user) { %>
                fetchUserRegistrations();
            <% } %>
        });
        
        function fetchEventDetails() {
            fetch(`/api/events/${eventId}`)
                .then(response => response.json())
                .then(event => {
                    eventData = event;
                    displayEventDetails(event);
                })
                .catch(error => {
                    console.error('Error fetching event details:', error);
                    document.getElementById('event-details').innerHTML = '<div class="alert alert-danger">Failed to load event details</div>';
                });
        }
        
        function displayEventDetails(event) {
            const eventDate = event.event_date ? new Date(event.event_date).toLocaleDateString() : 'Date TBD';
            const registrationOpenDate = new Date(event.registration_open_date).toLocaleDateString();
            const registrationCloseDate = new Date(event.registration_close_date).toLocaleDateString();
            
            const now = new Date();
            const regOpenDate = new Date(event.registration_open_date);
            const regCloseDate = new Date(event.registration_close_date);
            
            let registrationStatus = '';
            if (now < regOpenDate) {
                registrationStatus = `<span class="badge bg-warning">Registration opens on ${registrationOpenDate}</span>`;
            } else if (now > regCloseDate) {
                registrationStatus = `<span class="badge bg-danger">Registration closed</span>`;
            } else {
                registrationStatus = `<span class="badge bg-success">Registration open</span>`;
            }
            
            const eventDetails = `
                <div class="row">
                    <div class="col-md-8">
                        <h1>${event.title}</h1>
                        <p class="lead">${event.description || 'No description provided'}</p>
                        <div class="d-flex flex-wrap gap-3 mb-3">
                            <div><strong>Date:</strong> ${eventDate}</div>
                            <div><strong>Location:</strong> ${event.location || 'TBD'}</div>
                            <div>${registrationStatus}</div>
                        </div>
                        <div class="small text-muted">
                            Registration period: ${registrationOpenDate} - ${registrationCloseDate}
                        </div>
                    </div>
                    <div class="col-md-4">
                        <img src="${event.banner_url || '/images/default-event.jpg'}" class="img-fluid rounded" alt="${event.title}">
                    </div>
                </div>
            `;
            
            document.getElementById('event-details').innerHTML = eventDetails;
            
            // Update location tab
            document.getElementById('location-info').innerHTML = `
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Event Location</h5>
                        <p class="card-text">${event.location || 'Location information not provided'}</p>
                    </div>
                </div>
            `;
            
            // Update registration section
            updateRegistrationSection();
        }
        
        function fetchCategories() {
            fetch(`/api/events/${eventId}/categories`)
                .then(response => response.json())
                .then(data => {
                    categories = data;
                    displayCategories(data);
                })
                .catch(error => {
                    console.error('Error fetching categories:', error);
                    document.getElementById('categories-container').innerHTML = '<div class="alert alert-danger">Failed to load categories</div>';
                });
        }
        
        function displayCategories(categories) {
            const container = document.getElementById('categories-container');
            const noMessage = document.getElementById('no-categories-message');
            
            container.innerHTML = '';
            
            if (categories.length === 0) {
                container.innerHTML = '';
                noMessage.classList.remove('d-none');
                return;
            }
            
            noMessage.classList.add('d-none');
            
            const categoryList = document.createElement('div');
            categoryList.className = 'list-group';
            
            categories.forEach(category => {
                const item = document.createElement('div');
                item.className = 'list-group-item';
                
                item.innerHTML = `
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">${category.name}</h5>
                        <div>
                            <span class="badge bg-secondary">${category.max_participants ? `Max: ${category.max_participants}` : 'No limit'}</span>
                        </div>
                    </div>
                    <p class="mb-1">${category.description || 'No description provided'}</p>
                    <div class="mt-2" id="category-action-${category.id}">
                    </div>
                `;
                
                categoryList.appendChild(item);
            });
            
            container.appendChild(categoryList);
            
            // Update registration buttons
            if (userRegistrations.length > 0) {
                updateCategoryRegistrationButtons();
            }
        }
        
        function fetchTimetable() {
            fetch(`/api/events/${eventId}/timetable`)
                .then(response => response.json())
                .then(data => {
                    timetableEntries = data;
                    displayTimetable(data);
                })
                .catch(error => {
                    console.error('Error fetching timetable:', error);
                    document.getElementById('timetable-container').innerHTML = '<div class="alert alert-danger">Failed to load timetable</div>';
                });
        }
        
        function displayTimetable(entries) {
            const container = document.getElementById('timetable-container');
            const noMessage = document.getElementById('no-timetable-message');
            
            container.innerHTML = '';
            
            if (entries.length === 0) {
                container.innerHTML = '';
                noMessage.classList.remove('d-none');
                return;
            }
            
            noMessage.classList.add('d-none');
            
            // Sort entries by start time
            entries.sort((a, b) => new Date(a.start_time) - new Date(b.start_time));
            
            const table = document.createElement('table');
            table.className = 'table table-striped';
            
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Title</th>
                        <th>Location</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            `;
            
            const tbody = table.querySelector('tbody');
            
            entries.forEach(entry => {
                const startTime = new Date(entry.start_time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const endTime = new Date(entry.end_time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const date = new Date(entry.start_time).toLocaleDateString();
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${date}<br>${startTime} - ${endTime}</td>
                    <td>${entry.title}</td>
                    <td>${entry.location || 'TBD'}</td>
                    <td>${entry.description || ''}</td>
                `;
                
                tbody.appendChild(row);
            });
            
            container.appendChild(table);
        }
        
        function fetchUserRegistrations() {
            fetch('/api/my-registrations')
                .then(response => response.json())
                .then(data => {
                    userRegistrations = data.filter(reg => {
                        const category = categories.find(c => c.id === reg.category_id);
                        return category && category.event_id === eventId;
                    });
                    updateCategoryRegistrationButtons();
                    updateRegistrationSection();
                })
                .catch(error => {
                    console.error('Error fetching user registrations:', error);
                });
        }
        
        function updateCategoryRegistrationButtons() {
            categories.forEach(category => {
                const actionContainer = document.getElementById(`category-action-${category.id}`);
                if (!actionContainer) return;
                
                const registration = userRegistrations.find(reg => reg.category_id === category.id);
                
                if (registration) {
                    // User is registered for this category
                    let statusBadge = '';
                    switch(registration.status) {
                        case 'pending':
                            statusBadge = '<span class="badge bg-warning">Pending Approval</span>';
                            break;
                        case 'approved':
                            statusBadge = '<span class="badge bg-success">Approved</span>';
                            break;
                        case 'rejected':
                            statusBadge = '<span class="badge bg-danger">Rejected</span>';
                            break;
                    }
                    
                    actionContainer.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                ${statusBadge} You are registered for this category
                            </div>
                            <button class="btn btn-sm btn-outline-danger" onclick="cancelRegistration(${registration.id})">Cancel Registration</button>
                        </div>
                    `;
                } else {
                    // User is not registered
                    const now = new Date();
                    const regOpenDate = new Date(eventData.registration_open_date);
                    const regCloseDate = new Date(eventData.registration_close_date);
                    
                    if (now >= regOpenDate && now <= regCloseDate) {
                        actionContainer.innerHTML = `
                            <button class="btn btn-primary btn-sm" onclick="registerForCategory(${category.id})">Register</button>
                        `;
                    } else if (now < regOpenDate) {
                        actionContainer.innerHTML = `
                            <button class="btn btn-secondary btn-sm" disabled>Registration Not Open Yet</button>
                        `;
                    } else {
                        actionContainer.innerHTML = `
                            <button class="btn btn-secondary btn-sm" disabled>Registration Closed</button>
                        `;
                    }
                }
            });
        }
        
        function updateRegistrationSection() {
            if (!eventData) return;
            
            const registrationBody = document.getElementById('registration-body');
            const now = new Date();
            const regOpenDate = new Date(eventData.registration_open_date);
            const regCloseDate = new Date(eventData.registration_close_date);
            
            if (now < regOpenDate) {
                registrationBody.innerHTML = `
                    <div class="alert alert-warning">
                        Registration for this event has not opened yet. Registration will open on ${regOpenDate.toLocaleDateString()}.
                    </div>
                `;
            } else if (now > regCloseDate) {
                registrationBody.innerHTML = `
                    <div class="alert alert-danger">
                        Registration for this event is closed. Registration closed on ${regCloseDate.toLocaleDateString()}.
                    </div>
                `;
            } else {
                registrationBody.innerHTML = `
                    <div class="alert alert-success">
                        Registration is open! Select a category above to register.
                    </div>
                `;
            }
            
            // Add user registrations if logged in
            <% if (user) { %>
                if (userRegistrations.length > 0) {
                    const userRegList = document.createElement('div');
                    userRegList.innerHTML = `
                        <h5 class="mt-3">Your Registrations</h5>
                        <ul class="list-group">
                            ${userRegistrations.map(reg => {
                                const category = categories.find(c => c.id === reg.category_id);
                                let statusBadge = '';
                                switch(reg.status) {
                                    case 'pending':
                                        statusBadge = '<span class="badge bg-warning">Pending</span>';
                                        break;
                                    case 'approved':
                                        statusBadge = '<span class="badge bg-success">Approved</span>';
                                        break;
                                    case 'rejected':
                                        statusBadge = '<span class="badge bg-danger">Rejected</span>';
                                        break;
                                }
                                return `
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        ${category ? category.name : 'Unknown Category'}
                                        <div>
                                            ${statusBadge}
                                            <button class="btn btn-sm btn-outline-danger ms-2" onclick="cancelRegistration(${reg.id})">Cancel</button>
                                        </div>
                                    </li>
                                `;
                            }).join('')}
                        </ul>
                    `;
                    registrationBody.appendChild(userRegList);
                }
            <% } else { %>
                const loginPrompt = document.createElement('div');
                loginPrompt.className = 'alert alert-info mt-3';
                loginPrompt.innerHTML = 'Please <a href="/login">log in</a> to register for this event.';
                registrationBody.appendChild(loginPrompt);
            <% } %>
        }
        
        function registerForCategory(categoryId) {
            <% if (!user) { %>
                window.location.href = '/login';
                return;
            <% } %>
            
            fetch('/api/registrations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    category_id: categoryId
                })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Failed to register');
                    });
                }
                return response.json();
            })
            .then(data => {
                alert('Registration successful!');
                location.reload();
            })
            .catch(error => {
                alert(error.message);
            });
        }
        
        function cancelRegistration(registrationId) {
            if (confirm('Are you sure you want to cancel this registration?')) {
                fetch(`/api/registrations/${registrationId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to cancel registration');
                    }
                    alert('Registration cancelled successfully!');
                    location.reload();
                })
                .catch(error => {
                    alert(error.message);
                });
            }
        }
    </script>
</body>
</html>
