<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Event - Martial Arts Competitions</title>
    <link rel="stylesheet" href="/styleIndex.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include flatpickr for date selection -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
</head>
<body>
    <!-- Include the navigation header -->
    <%- include('header', {currentPage: 'create-event', user: user}); %>
    
    <div class="container my-5">
        <h1 class="mb-4">Create a New Event</h1>
        
        <!-- Alert message container (hidden by default) -->
        <div id="alert-container" class="alert d-none mb-4" role="alert"></div>
        
        <form id="create-event-form">
            <!-- Event Details Section -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Event Details</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Left Column -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="name" class="form-label">Event Name*</label>
                                <input type="text" class="form-control" id="name" name="name" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="5"></textarea>
                            </div>
                            
                            <div class="mb-3">
                                <label for="address" class="form-label">Address*</label>
                                <input type="text" class="form-control" id="address" name="address" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="banner_image_file" class="form-label">Banner Image</label>
                                <input type="file" class="form-control" id="banner_image_file" name="banner_image_file" accept="image/*">
                                <small class="text-muted">Upload an image for your event banner (recommended size: 1200Ã—400 pixels)</small>
                                <div id="banner-preview" class="mt-2 d-none">
                                    <img id="banner-preview-img" src="" alt="Banner preview" class="img-thumbnail" style="max-height: 150px;">
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="event_type" class="form-label">Event Type*</label>
                                <select class="form-select" id="event_type" name="event_type" required>
                                    <option value="">Select Event Type</option>
                                    <option value="team">Team event</option>
                                    <option value="free_for_all">Free for All</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- Right Column -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="start_date" class="form-label">Start Date*</label>
                                <input type="text" class="form-control datepicker" id="start_date" name="start_date" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="end_date" class="form-label">End Date*</label>
                                <input type="text" class="form-control datepicker" id="end_date" name="end_date" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="registration_start" class="form-label">Registration Start Date*</label>
                                <input type="text" class="form-control datepicker" id="registration_start" name="registration_start" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="registration_end" class="form-label">Registration End Date*</label>
                                <input type="text" class="form-control datepicker" id="registration_end" name="registration_end" required>
                            </div>
                            
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Categories Section -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Event Categories</h4>
                    <button type="button" class="btn btn-light btn-sm" id="add-category-btn">Add Category</button>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> Categories define the different competitions within your event. Each category can have specific age, weight, and gender criteria.
                    </div>
                    
                    <div id="categories-container">
                        <!-- Categories will be added here dynamically -->
                        <div class="text-center text-muted py-4" id="no-categories-message">
                            <p>No categories added yet. Click "Add Category" to create your first competition category.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                <button type="button" class="btn btn-outline-secondary me-md-2" onclick="window.location.href='/events'">Cancel</button>
                <button type="submit" class="btn btn-primary">Create Event</button>
            </div>
        </form>
    </div>
    
    <!-- Category Modal -->
    <div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="categoryModalLabel">Add Competition Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="category-form">
                        <input type="hidden" id="category-index" value="-1">
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="category-name" class="form-label">Category Name*</label>
                                <input type="text" class="form-control" id="category-name" required>
                            </div>
                            <div class="col-md-6">
                                <label for="category-description" class="form-label">Description</label>
                                <input type="text" class="form-control" id="category-description">
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="category-gender" class="form-label">Gender*</label>
                                <select class="form-select" id="category-gender" required>
                                    <option value="male">Male</option>
                                    <option value="female">Female</option>
                                    <option value="mixed">Mixed</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="category-age-group" class="form-label">Age Group*</label>
                                <select class="form-select" id="category-age-group" required>
                                    <option value="under_8">Under 8</option>
                                    <option value="under_12">Under 12</option>
                                    <option value="under_14">Under 14</option>
                                    <option value="under_16">Under 16 (Cadet)</option>
                                    <option value="under_18">Under 18 (Junior)</option>
                                    <option value="under_21">Under 21</option>
                                    <option value="senior">Senior</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="category-weight-class" class="form-label">Weight Class</label>
                                <input type="text" class="form-control" id="category-weight-class" placeholder="e.g., -60kg, 60-66kg, +100kg">
                                <small class="form-text text-muted">Format: "min-max" (e.g., 60-66kg) or "+/- value" (e.g., +100kg)</small>
                            </div>
                            <div class="col-md-6">
                                <label for="category-max-participants" class="form-label">Max Participants</label>
                                <input type="number" class="form-control" id="category-max-participants" min="1">
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="category-rules" class="form-label">Special Rules</label>
                            <textarea class="form-control" id="category-rules" rows="3"></textarea>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="category-fee" class="form-label">Registration Fee*</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="category-fee" min="0" step="0.01" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="category-status" class="form-label">Status</label>
                                <select class="form-select" id="category-status">
                                    <option value="active">Active</option>
                                    <option value="draft">Draft</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="save-category-btn">Save Category</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Footer -->
    <footer class="bg-light text-center py-3 mt-5">
        <p>&copy; 2025 Martial Arts Competitions. All Rights Reserved.</p>
    </footer>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    
    <script>
        // Global variables
        const categories = [];
        let categoryModal;
        const categoryFiles = []; // Added this line to fix the error
        
        // Initialize date pickers and other setup
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize flatpickr date picker
            flatpickr(".datepicker", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                minDate: "today"
            });
            
            // Initialize Bootstrap modal
            categoryModal = new bootstrap.Modal(document.getElementById('categoryModal'));
            
            // Set up event listeners
            document.getElementById('create-event-form').addEventListener('submit', submitEventForm);
            document.getElementById('add-category-btn').addEventListener('click', showAddCategoryModal);
            document.getElementById('save-category-btn').addEventListener('click', saveCategory);
            document.getElementById('banner_image_file').addEventListener('change', handleBannerPreview);
            
            // Set up banner image preview
            function handleBannerPreview(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        document.getElementById('banner-preview-img').src = event.target.result;
                        document.getElementById('banner-preview').classList.remove('d-none');
                    };
                    reader.readAsDataURL(file);
                } else {
                    document.getElementById('banner-preview').classList.add('d-none');
                }
            }
        });
        
        // Show modal for adding a new category
        function showAddCategoryModal() {
            // Reset form
            document.getElementById('category-form').reset();
            document.getElementById('category-index').value = -1;
            document.getElementById('categoryModalLabel').textContent = 'Add Competition Category';
            
            // Show modal
            categoryModal.show();
        }
        
        // Show modal for editing an existing category
        function editCategory(index) {
            const category = categories[index];
            
            // Fill form with category data
            document.getElementById('category-index').value = index;
            document.getElementById('category-name').value = category.name;
            document.getElementById('category-description').value = category.description || '';
            document.getElementById('category-gender').value = category.gender || 'male';
            document.getElementById('category-age-group').value = category.age_group || 'senior';
            document.getElementById('category-weight-class').value = category.weight_class || '';
            document.getElementById('category-max-participants').value = category.max_participants || '';
            document.getElementById('category-rules').value = category.rules || '';
            document.getElementById('category-fee').value = category.fee || '';
            document.getElementById('category-status').value = category.status || 'active';
            
            // Update modal title
            document.getElementById('categoryModalLabel').textContent = 'Edit Competition Category';
            
            // Show modal
            categoryModal.show();
        }
        
        // Save category data from modal
        function saveCategory() {
            // Validate required fields
            const categoryName = document.getElementById('category-name').value;
            const categoryFee = document.getElementById('category-fee').value;
            
            if (!categoryName) {
                alert('Category name is required');
                return;
            }
            
            if (!categoryFee) {
                alert('Registration fee is required');
                return;
            }
            
            // Get category index (if editing existing category)
            const categoryIndex = parseInt(document.getElementById('category-index').value);
            
            
            // Create category object
            const category = {
                name: categoryName,
                description: document.getElementById('category-description').value,
                gender: document.getElementById('category-gender').value,
                age_group: document.getElementById('category-age-group').value,
                weight_class: document.getElementById('category-weight-class').value || null,
                max_participants: document.getElementById('category-max-participants').value || null,
                rules: document.getElementById('category-rules').value,
                fee: categoryFee,
                status: document.getElementById('category-status').value,
            };
            
            // Add or update category in the array
            if (categoryIndex === -1) {
                // Add new category
                categories.push(category);
            } else {
                // Update existing category
                categories[categoryIndex] = category;
            }
            
            // Update UI
            updateCategoriesUI();
            
            // Close modal
            categoryModal.hide();
        }
        
        // Delete a category
        function deleteCategory(index) {
            if (confirm('Are you sure you want to delete this category?')) {
                categories.splice(index, 1);
                updateCategoriesUI();
            }
        }
        
        // Update the categories display in the UI
        function updateCategoriesUI() {
            const container = document.getElementById('categories-container');
            const noMessage = document.getElementById('no-categories-message');
            
            // Show/hide "no categories" message
            if (categories.length === 0) {
                noMessage.classList.remove('d-none');
                container.innerHTML = '';
                return;
            }
            
            // Hide "no categories" message and show categories
            noMessage.classList.add('d-none');
            
            // Build HTML for categories
            let html = '';
            
            categories.forEach((category, index) => {
                // Create details for display
                let details = [];
                
                // Add gender
                if (category.gender) {
                    const genderLabels = {
                        'male': 'Men',
                        'female': 'Women',
                        'mixed': 'Mixed'
                    };
                    details.push(genderLabels[category.gender] || category.gender);
                }
                
                // Add age group
                if (category.age_group) {
                    const ageGroupLabels = {
                        'under_8': 'Under 8',
                        'under_12': 'Under 12',
                        'under_14': 'Under 14',
                        'under_16': 'Under 16 (Cadet)',
                        'under_18': 'Under 18 (Junior)',
                        'under_21': 'Under 21',
                        'senior': 'Senior'
                    };
                    details.push(ageGroupLabels[category.age_group] || category.age_group);
                }
                
                // Add weight class if available
                if (category.weight_class) {
                    details.push(`Weight: ${category.weight_class}`);
                }
                
                html += `
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center ${category.status === 'draft' ? 'bg-light' : 'bg-success text-white'}">
                        <h5 class="mb-0">${category.name}</h5>
                        <div>
                            <button type="button" class="btn btn-sm ${category.status === 'draft' ? 'btn-outline-secondary' : 'btn-light'}" onclick="editCategory(${index})">
                                Edit
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteCategory(${index})">
                                Delete
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                ${category.description ? `<p>${category.description}</p>` : ''}
                                <p class="mb-1">
                                    ${details.length > 0 ? details.join(' â€¢ ') : 'Open to all participants'}
                                </p>
                                ${category.max_participants ? `<p class="mb-1">Max participants: ${category.max_participants}</p>` : ''}
                                ${category.rules ? `<p class="mb-0"><small>Special rules: ${category.rules}</small></p>` : ''}
                            </div>
                            <div class="col-md-4 text-md-end">
                                <h5 class="text-primary mb-1">$${parseFloat(category.fee).toFixed(2)}</h5>
                                <span class="badge ${category.status === 'active' ? 'bg-success' : 'bg-secondary'}">
                                    ${category.status === 'active' ? 'Active' : 'Draft'}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        // Submit the event form
        function submitEventForm(e) {
            e.preventDefault();
            
            // Create FormData object to handle file uploads
            const formData = new FormData();
            
            // Add form fields to FormData
            formData.append('name', document.getElementById('name').value);
            formData.append('description', document.getElementById('description').value);
            formData.append('address', document.getElementById('address').value);
            formData.append('event_type', document.getElementById('event_type').value);
            formData.append('start_date', document.getElementById('start_date').value);
            formData.append('end_date', document.getElementById('end_date').value);
            formData.append('registration_start', document.getElementById('registration_start').value);
            formData.append('registration_end', document.getElementById('registration_end').value);
            formData.append('creator_id', '<%= user.id %>'); // Get from session
            
            // Add banner image file if selected
            const bannerImageFile = document.getElementById('banner_image_file').files[0];
            if (bannerImageFile) {
                formData.append('banner_image_file', bannerImageFile);
            }
            
            // Add category files info
            if (categoryFiles.length > 0) {
                formData.append('category_files', JSON.stringify(categoryFiles));
            }
            
            
            // Add categories as JSON
            formData.append('categories', JSON.stringify(categories));
            
            // Add timestamps
            const now = new Date().toISOString();
            formData.append('created_at', now);
            formData.append('updated_at', now);
            
            // Validate required fields
            if (!formData.get('name') || !formData.get('address') || !formData.get('start_date') || 
                !formData.get('end_date') || !formData.get('registration_start') || 
                !formData.get('registration_end') || !formData.get('event_type')) {
                showAlert('Please fill in all required fields.', 'danger');
                return;
            }
            
            // Validate dates
            const startDate = new Date(formData.get('start_date'));
            const endDate = new Date(formData.get('end_date'));
            const regStartDate = new Date(formData.get('registration_start'));
            const regEndDate = new Date(formData.get('registration_end'));
            
            if (endDate < startDate) {
                showAlert('End date must be after start date.', 'danger');
                return;
            }
            
            if (regEndDate < regStartDate) {
                showAlert('Registration end date must be after registration start date.', 'danger');
                return;
            }
            
            if (startDate < regEndDate) {
                showAlert('Event start date should be after registration closes.', 'warning');
                // Continue anyway, just a warning
            }
            
            // Submit the form
            fetch('/createEvent', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Failed to create event');
                    });
                }
                return response.json();
            })
            .then(data => {
                showAlert('Event created successfully!', 'success');
                // Redirect to the event page after a short delay
                setTimeout(() => {
                    window.location.href = `/event/${data.id}`;
                }, 1500);
            })
            .catch(error => {
                showAlert(error.message, 'danger');
            });
        }
        
        // Display alert message
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alert-container');
            alertContainer.textContent = message;
            alertContainer.className = `alert alert-${type}`;
            alertContainer.classList.remove('d-none');
            
            // Scroll to top to make alert visible
            window.scrollTo(0, 0);
            
            // Auto-hide success messages after 5 seconds
            if (type === 'success') {
                setTimeout(() => {
                    alertContainer.classList.add('d-none');
                }, 5000);
            }
        }
    </script>
</body>
</html>
